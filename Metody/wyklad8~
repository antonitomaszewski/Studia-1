#lang racket

(define (lcons x f)
  (cons x f))

(define (lhead l)
  (car l))

(define (ltail l)
  ((cdr l)))

(define (nats-from m)
  (lcons
   m
   (lambda () (nats-from (+ m 1)))))

(define nats
  (nats-from 0))

(define (take n l)
  (if (or (null? l) (= n 0))
      null
      (cons (lhead l)
            (take (- n 1) (ltail l)))))

(define (filter p l)
  (writeln l)
  (cond [(null? l) null]
        [(p (lhead l))
         (lcons (lhead l)
                (lambda ()
                  (filter p (ltail l))))]
        [else (filter p (ltail l))]))

(define (prime? n)
  (define (div-by m)
    (cond [(= m n) true]
          [(= (modulo n m) 0) false]
          [else (div-by (+ m 1))]))
  (if (< n 2)
      false
      (div-by 2)))

(define (fib-gen n last1 last2);leniwa lista zwracająca kolejne liczby fibonacciego
  (cons (+ last1 last2)
        (lambda () (fib-gen (+ n last1) n last1))))

(define fibs
  (fib-gen 1 0 0))
;(take 10 fibs)

(define (int-gen n);leniwa lista zwracająca kolejne liczby całkowite
  (cons n
        (if (>= n 0)
            (lambda () (int-gen (+ (- 1) (- n))))
            (lambda () (int-gen (- n))))))
(define ints
  (int-gen 0))

(define (reverse lst)
  (rev-help lst null))

(define (rev-help lst acc)
  (if (null? lst)
      acc
      (rev-help (cdr lst) (cons (car lst) acc))))


